{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCropSize = getCropSize;\nexports.restrictPosition = restrictPosition;\nexports.getDistanceBetweenPoints = getDistanceBetweenPoints;\nexports.computeCroppedArea = computeCroppedArea;\nexports.getCenter = getCenter;\n/**\n * Compute the dimension of the crop area based on image size and aspect ratio\n * @param {number} imgWidth width of the src image in pixels\n * @param {number} imgHeight height of the src image in pixels\n * @param {number} aspect aspect ratio of the crop\n */\n\nfunction getCropSize(imgWidth, imgHeight, aspect) {\n  if (imgWidth >= imgHeight * aspect) {\n    return {\n      width: imgHeight * aspect,\n      height: imgHeight\n    };\n  }\n\n  return {\n    width: imgWidth,\n    height: imgWidth / aspect\n  };\n}\n/**\n * Ensure a new image position stays in the crop area.\n * @param {{x: number, y number}} position new x/y position requested for the image\n * @param {{width: number, height: number}} imageSize width/height of the src image\n * @param {{width: number, height: number}} cropSize width/height of the crop area\n * @param {number} zoom zoom value\n * @returns {{x: number, y number}}\n */\n\n\nfunction restrictPosition(position, imageSize, cropSize, zoom) {\n  return {\n    x: restrictPositionCoord(position.x, imageSize.width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, imageSize.height, cropSize.height, zoom)\n  };\n}\n\nfunction restrictPositionCoord(position, imageSize, cropSize, zoom) {\n  var maxPosition = imageSize * zoom / 2 - cropSize / 2;\n  return Math.min(maxPosition, Math.max(position, -maxPosition));\n}\n\nfunction getDistanceBetweenPoints(pointA, pointB) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2));\n}\n/**\n * Compute the output cropped area of the image in percentages and pixels.\n * x/y are the top-left coordinates on the src image\n * @param {{x: number, y number}} crop x/y position of the current center of the image\n * @param {{width: number, height: number, naturalWidth: number, naturelHeight: number}} imageSize width/height of the src image (default is size on the screen, natural is the original size)\n * @param {{width: number, height: number}} cropSize width/height of the crop area\n * @param {number} zoom zoom value\n */\n\n\nfunction computeCroppedArea(crop, imgSize, cropSize, zoom) {\n  var croppedAreaPercentages = {\n    x: limitArea(100, ((imgSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / imgSize.width * 100),\n    y: limitArea(100, ((imgSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / imgSize.height * 100),\n    width: limitArea(100, cropSize.width / imgSize.width * 100 / zoom),\n    height: limitArea(100, cropSize.height / imgSize.height * 100 / zoom)\n  };\n  var croppedAreaPixels = {\n    x: limitArea(imgSize.naturalWidth, croppedAreaPercentages.x * imgSize.naturalWidth / 100),\n    y: limitArea(imgSize.naturalHeight, croppedAreaPercentages.y * imgSize.naturalHeight / 100),\n    width: limitArea(imgSize.naturalWidth, croppedAreaPercentages.width * imgSize.naturalWidth / 100),\n    height: limitArea(imgSize.naturalHeight, croppedAreaPercentages.height * imgSize.naturalHeight / 100)\n  };\n  return {\n    croppedAreaPercentages: croppedAreaPercentages,\n    croppedAreaPixels: croppedAreaPixels\n  };\n}\n/**\n * Ensure the returned value is between 0 and max\n * @param {number} max\n * @param {number} value\n */\n\n\nfunction limitArea(max, value) {\n  return Math.min(max, Math.max(0, value));\n}\n/**\n * Return the point that is the center of point a and b\n * @param {{x: number, y: number}} a\n * @param {{x: number, y: number}} b\n */\n\n\nfunction getCenter(a, b) {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2\n  };\n}","map":null,"metadata":{},"sourceType":"script"}