{"ast":null,"code":"import _classCallCheck from \"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\src\\\\components\\\\ImageCropper.js\";\nimport React, { Component } from 'react';\nimport AvatarEditor from 'react-avatar-editor';\n\nvar ImageCropper =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImageCropper, _Component);\n\n  function ImageCropper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ImageCropper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ImageCropper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClickSave = function () {\n      if (_this.editor) {\n        // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n        // drawn on another canvas, or added to the DOM.\n        var canvas = _this.editor.getImage(); // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n\n\n        var canvasScaled = _this.editor.getImageScaledToCanvas();\n      }\n    };\n\n    _this.setEditorRef = function (editor) {\n      return _this.editor = editor;\n    };\n\n    return _this;\n  }\n\n  _createClass(ImageCropper, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AvatarEditor, {\n        ref: this.setEditorRef,\n        image: \"img/photos/cosmic_rose_essence_by_ellysiumn-dcccim4.jpg\",\n        width: 500,\n        height: 250,\n        border: 50,\n        color: [255, 255, 255, 0.6] // RGBA\n        ,\n        scale: 1.2,\n        rotate: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ImageCropper;\n}(Component);\n\nexport default ImageCropper;","map":{"version":3,"sources":["C:\\OpenServer\\domains\\akvatory.local\\frontend\\src\\components\\ImageCropper.js"],"names":["React","Component","AvatarEditor","ImageCropper","onClickSave","editor","canvas","getImage","canvasScaled","getImageScaledToCanvas","setEditorRef"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;;IAEMC,Y;;;;;;;;;;;;;;;;;;UACJC,W,GAAc,YAAM;AAClB,UAAI,MAAKC,MAAT,EAAiB;AACf;AACA;AACA,YAAMC,MAAM,GAAG,MAAKD,MAAL,CAAYE,QAAZ,EAAf,CAHe,CAKf;;;AACA,YAAMC,YAAY,GAAG,MAAKH,MAAL,CAAYI,sBAAZ,EAArB;AACD;AACF,K;;UAEDC,Y,GAAe,UAACL,MAAD;AAAA,aAAY,MAAKA,MAAL,GAAcA,MAA1B;AAAA,K;;;;;;;6BAEN;AACP,aACE,oBAAC,YAAD;AACE,QAAA,GAAG,EAAE,KAAKK,YADZ;AAEE,QAAA,KAAK,EAAC,yDAFR;AAGE,QAAA,KAAK,EAAE,GAHT;AAIE,QAAA,MAAM,EAAE,GAJV;AAKE,QAAA,MAAM,EAAE,EALV;AAME,QAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CANT,CAM+B;AAN/B;AAOE,QAAA,KAAK,EAAE,GAPT;AAQE,QAAA,MAAM,EAAE,CARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAYD;;;;EA3BwBT,S;;AA8B3B,eAAeE,YAAf","sourcesContent":["import React, { Component} from 'react';\r\nimport AvatarEditor from 'react-avatar-editor';\r\n \r\nclass ImageCropper extends Component {\r\n  onClickSave = () => {\r\n    if (this.editor) {\r\n      // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n      // drawn on another canvas, or added to the DOM.\r\n      const canvas = this.editor.getImage()\r\n \r\n      // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n      const canvasScaled = this.editor.getImageScaledToCanvas()\r\n    }\r\n  }\r\n \r\n  setEditorRef = (editor) => this.editor = editor\r\n\r\n  render() {\r\n    return (\r\n      <AvatarEditor\r\n        ref={this.setEditorRef}\r\n        image=\"img/photos/cosmic_rose_essence_by_ellysiumn-dcccim4.jpg\"\r\n        width={500}\r\n        height={250}\r\n        border={50}\r\n        color={[255, 255, 255, 0.6]} // RGBA\r\n        scale={1.2}\r\n        rotate={0}\r\n      />\r\n    )\r\n  }\r\n}\r\n \r\nexport default ImageCropper;"]},"metadata":{},"sourceType":"module"}