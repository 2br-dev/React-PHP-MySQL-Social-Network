{"map":"{\"version\":3,\"sources\":[\"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\src\\\\components\\\\SignupForm.js\",\"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\src\\\\App.js\",\"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\src\\\\serviceWorker.js\",\"C:\\\\OpenServer\\\\domains\\\\akvatory.local\\\\frontend\\\\src\\\\index.js\"],\"names\":[\"SignupForm\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"login\",\"password\",\"handleChange\",\"bind\",\"assertThisInitialized\",\"handleSubmit\",\"event\",\"setState\",\"defineProperty\",\"target\",\"name\",\"value\",\"e\",\"preventDefault\",\"formData\",\"FormData\",\"append\",\"$\",\"val\",\"ajax\",\"url\",\"data\",\"processData\",\"contentType\",\"type\",\"success\",\"res\",\"console\",\"log\",\"JSON\",\"parse\",\"result\",\"alert\",\"error\",\"err\",\"code\",\"react_default\",\"a\",\"createElement\",\"className\",\"id\",\"action\",\"method\",\"onSubmit\",\"htmlFor\",\"placeholder\",\"username\",\"onChange\",\"required\",\"length\",\"Component\",\"App\",\"components_SignupForm\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"uQA8FeA,cA1Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GACPC,SAAU,IAEZT,EAAKU,aAAsBV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,CAAAA,OAAAW,EAAA,EAAAX,CAAAD,KAC3BA,EAAKa,aAAsBb,EAAKa,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,CAAAA,OAAAW,EAAA,EAAAX,CAAAD,KAPVA,4EAWNc,GAEXX,KAAKY,SAALd,OAAAe,EAAA,EAAAf,CAAA,GACGa,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,6CAIzBC,GAGX,GAFAA,EAAEC,iBAEuB,KAArBlB,KAAKI,MAAMC,OAAwC,KAAxBL,KAAKI,MAAME,SAAiB,CACzD,IAAMa,EAAW,IAAIC,SAErBD,EAASE,OAAO,QAAYC,GAAAA,CAAE,uBAAuBC,OACrDJ,EAASE,OAAO,WAAYC,GAAAA,CAAE,0BAA0BC,OAExDD,EAAAA,EAAEE,KAAK,CACLC,IAAc,eACdC,KAAcP,EACdQ,aAAc,EACdC,aAAc,EACdC,KAAM,OACNC,QAAS,SAASC,GAChBC,QAAQC,IAAIF,GAEC,IADGG,KAAKC,MAAMJ,GAAMK,OAChBC,MAAM,mCAAYA,MAAM,UAE3CC,MAAO,SAASC,GACdF,MAAM,QAAUE,EAAIC,cAKxBH,MAAM,6PAKR,OACEI,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAA,KAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAA,CAAME,GAAG,WAAWC,OAAO,GAAGC,OAAO,OAAOC,SAAUhD,KAAKU,cACzD+B,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAA,CAAOM,QAAQ,SAAf,sGACAR,EAAAC,EAAAC,cAAA,QAAA,CACEC,UAAU,eACVC,GAAG,QACH9B,KAAK,QACLc,KAAK,OACLqB,YAAY,qGACZlC,MAAOhB,KAAKI,MAAM+C,SAClBC,SAAUpD,KAAKO,aACf8C,UAAQ,KAIZZ,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAA,CAAOM,QAAQ,YAAf,wCACAR,EAAAC,EAAAC,cAAA,QAAA,CACEC,UAAU,eACVC,GAAG,WACH9B,KAAK,WACLc,KAAK,WACLqB,YAAY,kFACZlC,MAAOhB,KAAKI,MAAME,SAClB8C,SAAUpD,KAAKO,aACf8C,UAAQ,IAERrD,KAAKI,MAAME,SAASgD,OAAS,GAA6B,KAAxBtD,KAAKI,MAAME,SAAkBmC,EAAAC,EAAAC,cAAA,IAAA,CAAGC,UAAU,uBAAb,qMAAgF,IAGnJH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,6BAAlB,yHAnFeW,EAAAA,WCYVC,mLATX,OACEf,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,cAJUF,EAAAA,WCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,EAAAA,EAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\r\\nimport $ from 'jquery';\\r\\n\\r\\nclass SignupForm extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      login: '',\\r\\n      password: '',\\r\\n    }\\r\\n    this.handleChange      =   this.handleChange.bind(this);\\r\\n    this.handleSubmit      =   this.handleSubmit.bind(this);\\r\\n  }\\r\\n\\r\\n  // динамически обрабатываем изменения полей\\r\\n  handleChange(event) {\\r\\n    // ставим стейт исходя из именя поля и вводимого значения\\r\\n    this.setState({\\r\\n      [event.target.name]: event.target.value\\r\\n    })\\r\\n  }\\r\\n\\r\\n  handleSubmit(e) {\\r\\n    e.preventDefault(); \\r\\n\\r\\n    if (this.state.login !== '' && this.state.password !== '') {\\r\\n      const formData = new FormData();\\r\\n        \\r\\n      formData.append('login',    $('input[name=\\\"login\\\"]').val());\\r\\n      formData.append('password', $('input[name=\\\"password\\\"]').val());\\r\\n\\r\\n      $.ajax({\\r\\n        url         : '/ajax/signup',\\r\\n        data        : formData,\\r\\n        processData : false,\\r\\n        contentType : false,\\r\\n        type: 'POST',\\r\\n        success: function(res) {\\r\\n          console.log(res);\\r\\n          let response = (JSON.parse(res)).result;\\r\\n          response === 1 ? alert('успех!') : alert('fail!');\\r\\n        },\\r\\n        error: function(err) {\\r\\n          alert('fail!' + err.code);\\r\\n        }\\r\\n      });\\r\\n\\r\\n    } else {\\r\\n      alert('пожалуйста, заполните все поля корректно!');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div className=\\\"form-container\\\">\\r\\n        <h1>ВХОД</h1>\\r\\n        <form id=\\\"register\\\" action=\\\"\\\" method=\\\"POST\\\" onSubmit={this.handleSubmit}>\\r\\n          <div className=\\\"form-group\\\">\\r\\n            <label htmlFor=\\\"login\\\">Введите логин или email</label>\\r\\n            <input\\r\\n              className=\\\"form-control\\\"\\r\\n              id=\\\"login\\\"\\r\\n              name=\\\"login\\\"\\r\\n              type=\\\"text\\\"\\r\\n              placeholder=\\\"Введите логин или email\\\"\\r\\n              value={this.state.username}\\r\\n              onChange={this.handleChange}\\r\\n              required\\r\\n            />    \\r\\n          </div>\\r\\n\\r\\n          <div className=\\\"form-group\\\">\\r\\n            <label htmlFor=\\\"password\\\">Пароль</label>\\r\\n            <input\\r\\n              className=\\\"form-control\\\"\\r\\n              id=\\\"password\\\"\\r\\n              name=\\\"password\\\"\\r\\n              type=\\\"password\\\"\\r\\n              placeholder=\\\"Введите пароль\\\"\\r\\n              value={this.state.password}\\r\\n              onChange={this.handleChange}\\r\\n              required\\r\\n            />\\r\\n             {this.state.password.length < 8 && this.state.password !== '' ? <p className=\\\"invalid-form-result\\\">Пароль должен быть не менее 8 символов</p> : ''}\\r\\n          </div>\\r\\n\\r\\n          <button className=\\\"btn btn-success btn-block\\\">Зарегистрироваться</button>\\r\\n\\r\\n        </form>  \\r\\n      </div>  \\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default SignupForm;\",\"import React, { Component } from 'react';\\nimport SignupForm from './components/SignupForm';\\nimport RegisterForm from './components/SignupForm';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <SignupForm />\\n        {/* <RegisterForm /> */}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,a,t){e.exports=t(21)},17:function(e,a,t){},21:function(e,a,t){\"use strict\";t.r(a);var n=t(0),r=t.n(n),o=t(9),l=t.n(o),s=(t(17),t(2)),i=t(3),c=t(5),u=t(4),m=t(6),d=t(10),h=t(1),p=t(7),b=t.n(p),g=function(e){function a(e){var t;return Object(s.a)(this,a),(t=Object(c.a)(this,Object(u.a)(a).call(this,e))).state={login:\"\",password:\"\"},t.handleChange=t.handleChange.bind(Object(h.a)(Object(h.a)(t))),t.handleSubmit=t.handleSubmit.bind(Object(h.a)(Object(h.a)(t))),t}return Object(m.a)(a,e),Object(i.a)(a,[{key:\"handleChange\",value:function(e){this.setState(Object(d.a)({},e.target.name,e.target.value))}},{key:\"handleSubmit\",value:function(e){if(e.preventDefault(),\"\"!==this.state.login&&\"\"!==this.state.password){var a=new FormData;a.append(\"login\",b()('input[name=\"login\"]').val()),a.append(\"password\",b()('input[name=\"password\"]').val()),b.a.ajax({url:\"/ajax/signup\",data:a,processData:!1,contentType:!1,type:\"POST\",success:function(e){console.log(e),1===JSON.parse(e).result?alert(\"\\u0443\\u0441\\u043f\\u0435\\u0445!\"):alert(\"fail!\")},error:function(e){alert(\"fail!\"+e.code)}})}else alert(\"\\u043f\\u043e\\u0436\\u0430\\u043b\\u0443\\u0439\\u0441\\u0442\\u0430, \\u0437\\u0430\\u043f\\u043e\\u043b\\u043d\\u0438\\u0442\\u0435 \\u0432\\u0441\\u0435 \\u043f\\u043e\\u043b\\u044f \\u043a\\u043e\\u0440\\u0440\\u0435\\u043a\\u0442\\u043d\\u043e!\")}},{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"form-container\"},r.a.createElement(\"h1\",null,\"\\u0412\\u0425\\u041e\\u0414\"),r.a.createElement(\"form\",{id:\"register\",action:\"\",method:\"POST\",onSubmit:this.handleSubmit},r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:\"login\"},\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043b\\u043e\\u0433\\u0438\\u043d \\u0438\\u043b\\u0438 email\"),r.a.createElement(\"input\",{className:\"form-control\",id:\"login\",name:\"login\",type:\"text\",placeholder:\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043b\\u043e\\u0433\\u0438\\u043d \\u0438\\u043b\\u0438 email\",value:this.state.username,onChange:this.handleChange,required:!0})),r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:\"password\"},\"\\u041f\\u0430\\u0440\\u043e\\u043b\\u044c\"),r.a.createElement(\"input\",{className:\"form-control\",id:\"password\",name:\"password\",type:\"password\",placeholder:\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043f\\u0430\\u0440\\u043e\\u043b\\u044c\",value:this.state.password,onChange:this.handleChange,required:!0}),this.state.password.length<8&&\"\"!==this.state.password?r.a.createElement(\"p\",{className:\"invalid-form-result\"},\"\\u041f\\u0430\\u0440\\u043e\\u043b\\u044c \\u0434\\u043e\\u043b\\u0436\\u0435\\u043d \\u0431\\u044b\\u0442\\u044c \\u043d\\u0435 \\u043c\\u0435\\u043d\\u0435\\u0435 8 \\u0441\\u0438\\u043c\\u0432\\u043e\\u043b\\u043e\\u0432\"):\"\"),r.a.createElement(\"button\",{className:\"btn btn-success btn-block\"},\"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c\\u0441\\u044f\")))}}]),a}(n.Component),f=function(e){function a(){return Object(s.a)(this,a),Object(c.a)(this,Object(u.a)(a).apply(this,arguments))}return Object(m.a)(a,e),Object(i.a)(a,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(g,null))}}]),a}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));t(19);l.a.render(r.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[11,2,1]]]);","extractedComments":[]}